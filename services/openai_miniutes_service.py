# services/openai_minutes_service.py

import os
from dotenv import load_dotenv
import openai

# .envファイルから環境変数を読み込む
load_dotenv()

# 環境変数からAPIキーを取得してOpenAI APIを設定
openai.api_key = os.environ.get("OPENAI_API_KEY")

def openai_generate_minutes(text):
    """入力されたテキストからOpenAI APIを使用してマークダウン形式の議事録を生成する関数"""
    try:
        # プロンプトの準備
        prompt = f"""プロの議事録作成者として、以下の会議内容から詳細かつ構造化された議事録を**日本語で**作成してください。以下の点に特に注意を払ってください：

1. 各議題項目とサブトピックについて、できるだけ詳細に記述してください。議論の内容、提案、提起された懸念事項を深く説明してください。

2. 専門用語や概念が言及された場合、簡単な説明や定義を追加してください。

3. プロジェクトやイニシアチブの進捗状況、現在の段階、次のステップについて、より具体的な情報を提供してください。

4. 重要な手順や方法論が議論された場合、各ステップを詳細に説明し、潜在的な問題点や注意事項を含めてください。

5. 目標や期限については、より具体的な詳細と、それらを達成するための具体的なアクションアイテムを提供してください。

6. 将来の計画や提案についてより詳細な説明を含め、それらが組織や目標にどのように貢献するかを分析してください。

7. チームの協力やコミュニケーションに関する具体的な方針や推奨事項がある場合、それらを詳細に記録してください。

8. 決定事項、アクションアイテム、期限が明確に定義されている場合、責任者や完了条件を含めてこれらを強調してください。

9. 議論された課題や問題点を詳細に記録し、提案された解決策も含めてください。

10. 次回の会議の準備事項や、会議間に完了すべきタスクを具体的に記載してください。

11. 財務事項が議論された場合、具体的な数字、予算配分、財務目標を正確に記録してください。

12. 法的または規制上の問題が議論された場合、その内容と潜在的な影響を慎重に文書化してください。

13. 新しいアイデアやイノベーションが議論された場合、その詳細と潜在的な影響を記録してください。

14. 参加者の役割や貢献が明確な場合、機密情報に注意しながら、名前を挙げて記録してください。

15. 議事録の最後に、重要なポイントの非常に詳細なサマリーを追加し、重要な決定事項とアクションアイテムを箇条書きで明確にリストアップしてください。

さらに、議事録をマークダウン形式で作成する際は、以下の点に注意してください：

- 適切な見出しレベル（#, ##, ### など）を使用して、文書を明確に構造化してください。
- リストには適切なマークダウン構文（- または 1. など）を使用してください。
- 重要な部分は適切に強調してください（**太字** または *斜体* を使用）。
- 必要に応じて適切な引用構文（>）を使用してください。
- 必要に応じて水平線（---）を使用してセクションを区切ってください。

議事録の冒頭には、基本的な会議情報（日付、時間、場所、参加者、議題など）を含めてください。

以下の会議内容に基づいて、上記の指示に従って包括的で詳細な議事録をマークダウン形式で作成してください。議事録は会議で使用された言語で作成してください。

{text}"""

        # OpenAI APIを使用してコンテンツを生成
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",  # または "gpt-4" を使用
            messages=[
                {"role": "system", "content": "You are a professional minute-taker."},
                {"role": "user", "content": prompt}
            ]
        )

        # 生成されたマークダウンテキストを返す
        return response.choices[0].message['content']
    except Exception as e:
        print(f"エラーが発生しました: {str(e)}")
        return "議事録の生成中にエラーが発生しました。"

# スクリプトが直接実行された場合のサンプル使用例
if __name__ == "__main__":
    # サンプルの会議テキスト（実際の使用時はこれを実際の会議内容に置き換えてください）
    meeting_text = """
    ここに実際の会議の議事録やメモを入力してください。
    """
    # 議事録を生成
    minutes = openai_generate_minutes(meeting_text)
    # 生成された議事録を表示
    print(minutes)